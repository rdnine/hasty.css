@mixin make-empty-space($origin, $class, $max, $step, $breakpoint: false) {
    @for $i from 1 through ceil($max/$step) {
        $value: $step * $i;
        @if $breakpoint {
            .#{$breakpoint}\:#{$class}#{$value} {
                @if ($origin == "spacer") {
                    height: #{$value}px; 
                } @else if ($origin == "block") {
                    width: #{$value}px; 
                    display: inline-block;
                    min-height: 0.1rem;
                }
            }
        } @else {
            .#{$class}#{$value} { 
                @if ($origin == "spacer") {
                    height: #{$value}px; 
                } @else if ($origin == "block") {
                    width: #{$value}px; 
                    display: inline-block;
                    min-height: 0.1rem;
                }
            }
        }
    }
}

@mixin make-object-space ($origin, $class, $type, $breakpoint: false)  {
    @each $space in $space-values {
        $measure: nth($space, 1);
        $value: nth($space, 2);

        @if $breakpoint {
            .#{$breakpoint}\:#{$class}-#{$measure} {
                @if ($type == 'y') {
                    #{$origin}: #{$value} 0;
                } @else if ($type == 'x') {
                    #{$origin}: 0 #{$value};
                } @else if ($type == 't') {
                    #{$origin}-top: #{$value};
                } @else if ($type == 'b') {
                    #{$origin}-bottom: #{$value};
                } @else if ($type == 'l') {
                    #{$origin}-left: #{$value};
                } @else if ($type == 'r') {
                    #{$origin}-right: #{$value};
                } @else {
                    #{$origin}: #{$value};
                }
            }
        } @else {
            .#{$class}-#{$measure} {
                @if ($type == 'y') {
                    #{$origin}: #{$value} 0;
                } @else if ($type == 'x') {
                    #{$origin}: 0 #{$value};
                } @else if ($type == 't') {
                    #{$origin}-top: #{$value};
                } @else if ($type == 'b') {
                    #{$origin}-bottom: #{$value};
                } @else if ($type == 'l') {
                    #{$origin}-left: #{$value};
                } @else if ($type == 'r') {
                    #{$origin}-right: #{$value};
                } @else {
                    #{$origin}: #{$value};
                }
            }
        }
    }
}

@mixin make-width($breakpoint: false) {
    @each $width in $widths {
        $class: nth($width, 1);
        $value: nth($width, 2);

        @if (str-index($class, "/")) {
            $index: str-index($class, "/");
            $first-slice: str-slice($class, 0, $index - 1);
            $last-slice: str-slice($class, $index + 1, str-length($class));

            @if $breakpoint {
                .#{$breakpoint}\:w-#{$first-slice}\/#{$last-slice} {
                    width: $value;
                }
            } @else {
                .w-#{$first-slice}\/#{$last-slice} { 
                    width: $value;
                }
            }

        } @else {
            @if $breakpoint {
                .#{$breakpoint}\:w-#{$class} {
                    width: $value;
                }
            } @else {
                .w-#{$class} { 
                    width: $value;
                }
            }
        }
    }
}

@mixin make-height($breakpoint: false) {
    @each $height in $heights {
        $class: nth($height, 1);
        $value: nth($height, 2);

        @if $breakpoint {
            .#{$breakpoint}\:h-#{$class} {
                height: $value;
            }
        } @else {
            .h-#{$class} { 
                height: $value;
            }
        }
    }
}

@mixin make-displays($breakpoint: false) {
    @each $display in $displays {
        $class: nth($display, 1);
        $value: nth($display, 2);

        @if $breakpoint {
            .#{$breakpoint}\:d-#{$class} {
                display: $value;
            }
        } @else {
            .d-#{$class} { 
                display: $value;
            }
        }
    }
}

@mixin make-positions($breakpoint: false) {
    @each $position in $positions {
        $class: nth($position, 1);
        $value: nth($position, 2);

        @if $breakpoint {
            .#{$breakpoint}\:p-#{$class} {
                position: $value;
            }
        } @else {
            .p-#{$class} { 
                position: $value;
            }
        }
    }
}

@mixin make-utility-breakpoints($utility) {
    @each $breakpoint in $breakpoints {
        $break : nth($breakpoint, 1);
        $point : nth($breakpoint, 2);

        @media screen and (min-width: #{$point}px) {
            @if ($utility == "spacers") {
                @include make-empty-space('spacer', 'sp', $spacers-max, $spacers-step, $break);
            } @else if ($utility == "blocks") {
                @include make-empty-space('block', 'blk', $blocks-max, $blocks-step, $break);
            } @else if ($utility == "widths") {
                @include make-width($break);
            } @else if ($utility == "heights") {
                @include make-height($break);
            } @else if ($utility == "displays") {
                @include make-displays($break);
            } @else if ($utility == "positions") {
                @include make-positions($break);
            }
        }
    }
}